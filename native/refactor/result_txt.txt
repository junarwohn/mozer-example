free_var %x_81: Tensor[(1, 32, 128, 128), int8];
%0 = cast(%x_81, dtype="float32");
%1 = divide(%0, 7f);
let %x_8: Tensor[(1, 32, 128, 128), float32] /* ty=Tensor[(1, 32, 128, 128), float32] */ = add(%1, 18f);
free_var %x_111: Tensor[(1, 64, 64, 64), int8];
%2 = cast(%x_111, dtype="float32");
%3 = divide(%2, 7f);
let %x_11: Tensor[(1, 64, 64, 64), float32] = add(%3, 18f);
let %x_10: Tensor[(64, 32, 3, 3), float32] /* ty=Tensor[(64, 32, 3, 3), float32] */ = meta[relay.Constant][0] /* ty=Tensor[(64, 32, 3, 3), float32] */;
let %x_7: Tensor[(32), float32] /* ty=Tensor[(32), float32] */ = meta[relay.Constant][1] /* ty=Tensor[(32), float32] */;
let %x_5: Tensor[(32, 16, 3, 3), float32] /* ty=Tensor[(32, 16, 3, 3), float32] */ = meta[relay.Constant][2] /* ty=Tensor[(32, 16, 3, 3), float32] */;
let %x_2: Tensor[(16), float32] /* ty=Tensor[(16), float32] */ = meta[relay.Constant][3] /* ty=Tensor[(16), float32] */;
let %x_0: Tensor[(16, 3, 3, 3), float32] /* ty=Tensor[(16, 3, 3, 3), float32] */ = meta[relay.Constant][4] /* ty=Tensor[(16, 3, 3, 3), float32] */;
let %x_12: Tensor[(64), float32] /* ty=Tensor[(64), float32] */ = meta[relay.Constant][5] /* ty=Tensor[(64), float32] */;
let %x_13: Tensor[(1, 64, 64, 64), float32] /* ty=Tensor[(1, 64, 64, 64), float32] */ = nn.bias_add(%x_11, %x_12);
let %x_14: Tensor[(1, 64, 32i64, 32i64), float32] /* ty=Tensor[(1, 64, 32i64, 32i64), float32] */ = nn.max_pool2d(%x_13, pool_size=[2, 2], strides=[2, 2], padding=[0i64, 0i64, 0i64, 0i64]) /* ty=Tensor[(1, 64, 32i64, 32i64), float32] */;
let %x_15: Tensor[(64, 32, 3, 3), float32] /* ty=Tensor[(64, 32, 3, 3), float32] */ = meta[relay.Constant][6] /* ty=Tensor[(64, 32, 3, 3), float32] */;
let %x_16: Tensor[(1, 32, 64, 64), float32] /* ty=Tensor[(1, 32, 64, 64), float32] */ = nn.conv2d_transpose(%x_14, %x_15, channels=32, kernel_size=[3, 3], strides=[2, 2], padding=[0i64, 0i64, 1i64, 1i64], kernel_layout="IOHW") /* ty=Tensor[(1, 32, 64, 64), float32] */;
let %x_17: Tensor[(32), float32] /* ty=Tensor[(32), float32] */ = meta[relay.Constant][7] /* ty=Tensor[(32), float32] */;
let %x_18: Tensor[(1, 32, 64, 64), float32] /* ty=Tensor[(1, 32, 64, 64), float32] */ = nn.bias_add(%x_16, %x_17) /* ty=Tensor[(1, 32, 64, 64), float32] */;
let %x_19: (Tensor[(1, 32, 64, 64), float32], Tensor[(1, 64, 64, 64), float32]) /* ty=(Tensor[(1, 32, 64, 64), float32], Tensor[(1, 64, 64, 64), float32]) */ = (%x_18, %x_13) /* ty=(Tensor[(1, 32, 64, 64), float32], Tensor[(1, 64, 64, 64), float32]) */;
let %x_20: Tensor[(1, 96, 64, 64), float32] /* ty=Tensor[(1, 96, 64, 64), float32] */ = concatenate(%x_19, axis=1) /* ty=Tensor[(1, 96, 64, 64), float32] */;
let %x_21: Tensor[(96, 16, 3, 3), float32] /* ty=Tensor[(96, 16, 3, 3), float32] */ = meta[relay.Constant][8] /* ty=Tensor[(96, 16, 3, 3), float32] */;
let %x_22: Tensor[(1, 16, 128, 128), float32] /* ty=Tensor[(1, 16, 128, 128), float32] */ = nn.conv2d_transpose(%x_20, %x_21, channels=16, kernel_size=[3, 3], strides=[2, 2], padding=[0i64, 0i64, 1i64, 1i64], kernel_layout="IOHW") /* ty=Tensor[(1, 16, 128, 128), float32] */;
let %x_23: Tensor[(16), float32] /* ty=Tensor[(16), float32] */ = meta[relay.Constant][9] /* ty=Tensor[(16), float32] */;
let %x_24: Tensor[(1, 16, 128, 128), float32] /* ty=Tensor[(1, 16, 128, 128), float32] */ = nn.bias_add(%x_22, %x_23) /* ty=Tensor[(1, 16, 128, 128), float32] */;
let %x_25: (Tensor[(1, 16, 128, 128), float32], Tensor[(1, 32, 128, 128), float32]) /* ty=(Tensor[(1, 16, 128, 128), float32], Tensor[(1, 32, 128, 128), float32]) */ = (%x_24, %x_8) /* ty=(Tensor[(1, 16, 128, 128), float32], Tensor[(1, 32, 128, 128), float32]) */;
let %x_26: Tensor[(1, 48, 128, 128), float32] /* ty=Tensor[(1, 48, 128, 128), float32] */ = concatenate(%x_25, axis=1) /* ty=Tensor[(1, 48, 128, 128), float32] */;
let %x_27: Tensor[(48, 1, 3, 3), float32] /* ty=Tensor[(48, 1, 3, 3), float32] */ = meta[relay.Constant][10] /* ty=Tensor[(48, 1, 3, 3), float32] */;
let %x_28: Tensor[(1, 1, 256, 256), float32] /* ty=Tensor[(1, 1, 256, 256), float32] */ = nn.conv2d_transpose(%x_26, %x_27, channels=1, kernel_size=[3, 3], strides=[2, 2], padding=[0i64, 0i64, 1i64, 1i64], kernel_layout="IOHW") /* ty=Tensor[(1, 1, 256, 256), float32] */;
let %x_29: Tensor[(1), float32] /* ty=Tensor[(1), float32] */ = meta[relay.Constant][11] /* ty=Tensor[(1), float32] */;
let %x_30: Tensor[(1, 1, 256, 256), float32] /* ty=Tensor[(1, 1, 256, 256), float32] */ = nn.bias_add(%x_28, %x_29) /* ty=Tensor[(1, 1, 256, 256), float32] */;
%x_30

################################################